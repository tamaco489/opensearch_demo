// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ヘルスチェックAPI
	// (GET /healthcheck)
	Healthcheck(c *gin.Context)
	// 不適切なコメントの一覧取得API
	// (GET /v1/admin/products/comments/violations)
	GetProductCommentViolations(c *gin.Context, params GetProductCommentViolationsParams)
	// 不適切なコメントの削除API
	// (DELETE /v1/admin/products/comments/violations/{commentID})
	DeleteProductCommentViolationByID(c *gin.Context, commentID uint64)
	// 外部決済向けサービスのアカウント削除API
	// (DELETE /v1/payment/customers)
	DeleteCustomer(c *gin.Context)
	// 外部決済向けサービスのアカウント登録API
	// (POST /v1/payment/customers)
	CreateCustomer(c *gin.Context)
	// 外部決済向けサービスのアカウント取得API
	// (GET /v1/payment/customers/{userID})
	GetCustomerByUserID(c *gin.Context, userID int64)
	// 登録済みクレジットカードの削除API
	// (DELETE /v1/payments/cards)
	DeleteCreditCard(c *gin.Context)
	// 登録済みクレジットカードの一覧取得API
	// (GET /v1/payments/cards)
	GetCreditCards(c *gin.Context)
	// クレジットカードの新規登録API
	// (POST /v1/payments/cards)
	CreateCreditCard(c *gin.Context)
	// 商品の購入API
	// (POST /v1/payments/charges)
	CreateCharge(c *gin.Context)
	// 購入履歴の一覧取得API
	// (GET /v1/payments/charges/histories)
	GetChargeHistories(c *gin.Context, params GetChargeHistoriesParams)
	// 商品の予約API
	// (POST /v1/payments/reservations)
	CreateReservation(c *gin.Context)
	// 商品の一覧情報取得API
	// (GET /v1/products)
	GetProducts(c *gin.Context, params GetProductsParams)
	// 商品の詳細情報取得API
	// (GET /v1/products/{productID})
	GetProductByID(c *gin.Context, productID int64)
	// 商品に対してのコメント一覧取得API
	// (GET /v1/products/{productID}/comments)
	GetProductComments(c *gin.Context, productID uint64, params GetProductCommentsParams)
	// 商品に対してのコメント投稿API
	// (POST /v1/products/{productID}/comments)
	CreateProductComment(c *gin.Context, productID uint64)
	// 商品に対しての詳細なコメント取得API
	// (GET /v1/products/{productID}/comments/{commentID})
	GetProductCommentByID(c *gin.Context, productID uint64, commentID uint64)
	// コメントに対しての「いいね」を取り消すAPI
	// (DELETE /v1/products/{productID}/comments/{commentID}/like)
	DeleteLikeProductComment(c *gin.Context, productID uint64, commentID uint64)
	// コメントに対しての「いいね」API
	// (POST /v1/products/{productID}/comments/{commentID}/like)
	CreateLikeProductComment(c *gin.Context, productID uint64, commentID uint64)
	// 自身のコメント削除API
	// (DELETE /v1/products/{productID}/users/comments/{commentID})
	DeleteProductMyComment(c *gin.Context, productID uint64, commentID uint64)
	// 自身のコメント取得API
	// (GET /v1/products/{productID}/users/comments/{commentID})
	GetProductMyComment(c *gin.Context, productID uint64, commentID uint64)
	// 自身のコメント更新API
	// (PUT /v1/products/{productID}/users/comments/{commentID})
	UpdateProductMyComment(c *gin.Context, productID uint64, commentID uint64)
	// ユーザの新規登録API
	// (POST /v1/users)
	CreateUser(c *gin.Context)
	// 自身のユーザ情報取得API
	// (GET /v1/users/me)
	GetMe(c *gin.Context)
	// プロフィール情報の新規登録API
	// (POST /v1/users/profiles)
	CreateProfile(c *gin.Context)
	// 自身のプロフィール情報取得API
	// (GET /v1/users/profiles/me)
	GetProfileMe(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Healthcheck operation middleware
func (siw *ServerInterfaceWrapper) Healthcheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Healthcheck(c)
}

// GetProductCommentViolations operation middleware
func (siw *ServerInterfaceWrapper) GetProductCommentViolations(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductCommentViolationsParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductCommentViolations(c, params)
}

// DeleteProductCommentViolationByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteProductCommentViolationByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "commentID" -------------
	var commentID uint64

	err = runtime.BindStyledParameter("simple", false, "commentID", c.Param("commentID"), &commentID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter commentID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProductCommentViolationByID(c, commentID)
}

// DeleteCustomer operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomer(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCustomer(c)
}

// CreateCustomer operation middleware
func (siw *ServerInterfaceWrapper) CreateCustomer(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCustomer(c)
}

// GetCustomerByUserID operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerByUserID(c *gin.Context) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID int64

	err = runtime.BindStyledParameter("simple", false, "userID", c.Param("userID"), &userID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCustomerByUserID(c, userID)
}

// DeleteCreditCard operation middleware
func (siw *ServerInterfaceWrapper) DeleteCreditCard(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCreditCard(c)
}

// GetCreditCards operation middleware
func (siw *ServerInterfaceWrapper) GetCreditCards(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCreditCards(c)
}

// CreateCreditCard operation middleware
func (siw *ServerInterfaceWrapper) CreateCreditCard(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCreditCard(c)
}

// CreateCharge operation middleware
func (siw *ServerInterfaceWrapper) CreateCharge(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCharge(c)
}

// GetChargeHistories operation middleware
func (siw *ServerInterfaceWrapper) GetChargeHistories(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChargeHistoriesParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChargeHistories(c, params)
}

// CreateReservation operation middleware
func (siw *ServerInterfaceWrapper) CreateReservation(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateReservation(c)
}

// GetProducts operation middleware
func (siw *ServerInterfaceWrapper) GetProducts(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductsParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProducts(c, params)
}

// GetProductByID operation middleware
func (siw *ServerInterfaceWrapper) GetProductByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "productID" -------------
	var productID int64

	err = runtime.BindStyledParameter("simple", false, "productID", c.Param("productID"), &productID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductByID(c, productID)
}

// GetProductComments operation middleware
func (siw *ServerInterfaceWrapper) GetProductComments(c *gin.Context) {

	var err error

	// ------------- Path parameter "productID" -------------
	var productID uint64

	err = runtime.BindStyledParameter("simple", false, "productID", c.Param("productID"), &productID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductCommentsParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductComments(c, productID, params)
}

// CreateProductComment operation middleware
func (siw *ServerInterfaceWrapper) CreateProductComment(c *gin.Context) {

	var err error

	// ------------- Path parameter "productID" -------------
	var productID uint64

	err = runtime.BindStyledParameter("simple", false, "productID", c.Param("productID"), &productID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProductComment(c, productID)
}

// GetProductCommentByID operation middleware
func (siw *ServerInterfaceWrapper) GetProductCommentByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "productID" -------------
	var productID uint64

	err = runtime.BindStyledParameter("simple", false, "productID", c.Param("productID"), &productID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productID: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "commentID" -------------
	var commentID uint64

	err = runtime.BindStyledParameter("simple", false, "commentID", c.Param("commentID"), &commentID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter commentID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductCommentByID(c, productID, commentID)
}

// DeleteLikeProductComment operation middleware
func (siw *ServerInterfaceWrapper) DeleteLikeProductComment(c *gin.Context) {

	var err error

	// ------------- Path parameter "productID" -------------
	var productID uint64

	err = runtime.BindStyledParameter("simple", false, "productID", c.Param("productID"), &productID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productID: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "commentID" -------------
	var commentID uint64

	err = runtime.BindStyledParameter("simple", false, "commentID", c.Param("commentID"), &commentID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter commentID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteLikeProductComment(c, productID, commentID)
}

// CreateLikeProductComment operation middleware
func (siw *ServerInterfaceWrapper) CreateLikeProductComment(c *gin.Context) {

	var err error

	// ------------- Path parameter "productID" -------------
	var productID uint64

	err = runtime.BindStyledParameter("simple", false, "productID", c.Param("productID"), &productID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productID: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "commentID" -------------
	var commentID uint64

	err = runtime.BindStyledParameter("simple", false, "commentID", c.Param("commentID"), &commentID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter commentID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateLikeProductComment(c, productID, commentID)
}

// DeleteProductMyComment operation middleware
func (siw *ServerInterfaceWrapper) DeleteProductMyComment(c *gin.Context) {

	var err error

	// ------------- Path parameter "productID" -------------
	var productID uint64

	err = runtime.BindStyledParameter("simple", false, "productID", c.Param("productID"), &productID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productID: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "commentID" -------------
	var commentID uint64

	err = runtime.BindStyledParameter("simple", false, "commentID", c.Param("commentID"), &commentID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter commentID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProductMyComment(c, productID, commentID)
}

// GetProductMyComment operation middleware
func (siw *ServerInterfaceWrapper) GetProductMyComment(c *gin.Context) {

	var err error

	// ------------- Path parameter "productID" -------------
	var productID uint64

	err = runtime.BindStyledParameter("simple", false, "productID", c.Param("productID"), &productID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productID: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "commentID" -------------
	var commentID uint64

	err = runtime.BindStyledParameter("simple", false, "commentID", c.Param("commentID"), &commentID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter commentID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductMyComment(c, productID, commentID)
}

// UpdateProductMyComment operation middleware
func (siw *ServerInterfaceWrapper) UpdateProductMyComment(c *gin.Context) {

	var err error

	// ------------- Path parameter "productID" -------------
	var productID uint64

	err = runtime.BindStyledParameter("simple", false, "productID", c.Param("productID"), &productID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productID: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "commentID" -------------
	var commentID uint64

	err = runtime.BindStyledParameter("simple", false, "commentID", c.Param("commentID"), &commentID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter commentID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateProductMyComment(c, productID, commentID)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMe(c)
}

// CreateProfile operation middleware
func (siw *ServerInterfaceWrapper) CreateProfile(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProfile(c)
}

// GetProfileMe operation middleware
func (siw *ServerInterfaceWrapper) GetProfileMe(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfileMe(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/healthcheck", wrapper.Healthcheck)
	router.GET(options.BaseURL+"/v1/admin/products/comments/violations", wrapper.GetProductCommentViolations)
	router.DELETE(options.BaseURL+"/v1/admin/products/comments/violations/:commentID", wrapper.DeleteProductCommentViolationByID)
	router.DELETE(options.BaseURL+"/v1/payment/customers", wrapper.DeleteCustomer)
	router.POST(options.BaseURL+"/v1/payment/customers", wrapper.CreateCustomer)
	router.GET(options.BaseURL+"/v1/payment/customers/:userID", wrapper.GetCustomerByUserID)
	router.DELETE(options.BaseURL+"/v1/payments/cards", wrapper.DeleteCreditCard)
	router.GET(options.BaseURL+"/v1/payments/cards", wrapper.GetCreditCards)
	router.POST(options.BaseURL+"/v1/payments/cards", wrapper.CreateCreditCard)
	router.POST(options.BaseURL+"/v1/payments/charges", wrapper.CreateCharge)
	router.GET(options.BaseURL+"/v1/payments/charges/histories", wrapper.GetChargeHistories)
	router.POST(options.BaseURL+"/v1/payments/reservations", wrapper.CreateReservation)
	router.GET(options.BaseURL+"/v1/products", wrapper.GetProducts)
	router.GET(options.BaseURL+"/v1/products/:productID", wrapper.GetProductByID)
	router.GET(options.BaseURL+"/v1/products/:productID/comments", wrapper.GetProductComments)
	router.POST(options.BaseURL+"/v1/products/:productID/comments", wrapper.CreateProductComment)
	router.GET(options.BaseURL+"/v1/products/:productID/comments/:commentID", wrapper.GetProductCommentByID)
	router.DELETE(options.BaseURL+"/v1/products/:productID/comments/:commentID/like", wrapper.DeleteLikeProductComment)
	router.POST(options.BaseURL+"/v1/products/:productID/comments/:commentID/like", wrapper.CreateLikeProductComment)
	router.DELETE(options.BaseURL+"/v1/products/:productID/users/comments/:commentID", wrapper.DeleteProductMyComment)
	router.GET(options.BaseURL+"/v1/products/:productID/users/comments/:commentID", wrapper.GetProductMyComment)
	router.PUT(options.BaseURL+"/v1/products/:productID/users/comments/:commentID", wrapper.UpdateProductMyComment)
	router.POST(options.BaseURL+"/v1/users", wrapper.CreateUser)
	router.GET(options.BaseURL+"/v1/users/me", wrapper.GetMe)
	router.POST(options.BaseURL+"/v1/users/profiles", wrapper.CreateProfile)
	router.GET(options.BaseURL+"/v1/users/profiles/me", wrapper.GetProfileMe)
}

type AlreadyExistsResponse struct {
}

type BadRequestResponse struct {
}

type ForbiddenResponse struct {
}

type InternalServerErrorResponse struct {
}

type NotFoundResponse struct {
}

type UnauthorizedResponse struct {
}

type HealthcheckRequestObject struct {
}

type HealthcheckResponseObject interface {
	VisitHealthcheckResponse(w http.ResponseWriter) error
}

type Healthcheck200JSONResponse HealthCheck

func (response Healthcheck200JSONResponse) VisitHealthcheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProductCommentViolationsRequestObject struct {
	Params GetProductCommentViolationsParams
}

type GetProductCommentViolationsResponseObject interface {
	VisitGetProductCommentViolationsResponse(w http.ResponseWriter) error
}

type GetProductCommentViolations200JSONResponse Violations

func (response GetProductCommentViolations200JSONResponse) VisitGetProductCommentViolationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProductCommentViolations401Response = UnauthorizedResponse

func (response GetProductCommentViolations401Response) VisitGetProductCommentViolationsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetProductCommentViolations403Response = ForbiddenResponse

func (response GetProductCommentViolations403Response) VisitGetProductCommentViolationsResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetProductCommentViolations404Response = NotFoundResponse

func (response GetProductCommentViolations404Response) VisitGetProductCommentViolationsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetProductCommentViolations500Response = InternalServerErrorResponse

func (response GetProductCommentViolations500Response) VisitGetProductCommentViolationsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteProductCommentViolationByIDRequestObject struct {
	CommentID uint64 `json:"commentID"`
}

type DeleteProductCommentViolationByIDResponseObject interface {
	VisitDeleteProductCommentViolationByIDResponse(w http.ResponseWriter) error
}

type DeleteProductCommentViolationByID204Response struct {
}

func (response DeleteProductCommentViolationByID204Response) VisitDeleteProductCommentViolationByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteProductCommentViolationByID401Response = UnauthorizedResponse

func (response DeleteProductCommentViolationByID401Response) VisitDeleteProductCommentViolationByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteProductCommentViolationByID403Response = ForbiddenResponse

func (response DeleteProductCommentViolationByID403Response) VisitDeleteProductCommentViolationByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteProductCommentViolationByID404Response = NotFoundResponse

func (response DeleteProductCommentViolationByID404Response) VisitDeleteProductCommentViolationByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteProductCommentViolationByID500Response = InternalServerErrorResponse

func (response DeleteProductCommentViolationByID500Response) VisitDeleteProductCommentViolationByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteCustomerRequestObject struct {
}

type DeleteCustomerResponseObject interface {
	VisitDeleteCustomerResponse(w http.ResponseWriter) error
}

type DeleteCustomer204Response struct {
}

func (response DeleteCustomer204Response) VisitDeleteCustomerResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCustomer400Response = BadRequestResponse

func (response DeleteCustomer400Response) VisitDeleteCustomerResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteCustomer401Response = UnauthorizedResponse

func (response DeleteCustomer401Response) VisitDeleteCustomerResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteCustomer409Response = AlreadyExistsResponse

func (response DeleteCustomer409Response) VisitDeleteCustomerResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type DeleteCustomer500Response = InternalServerErrorResponse

func (response DeleteCustomer500Response) VisitDeleteCustomerResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateCustomerRequestObject struct {
}

type CreateCustomerResponseObject interface {
	VisitCreateCustomerResponse(w http.ResponseWriter) error
}

type CreateCustomer201JSONResponse CreateCustomerResponse

func (response CreateCustomer201JSONResponse) VisitCreateCustomerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateCustomer400Response = BadRequestResponse

func (response CreateCustomer400Response) VisitCreateCustomerResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateCustomer401Response = UnauthorizedResponse

func (response CreateCustomer401Response) VisitCreateCustomerResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateCustomer409Response = AlreadyExistsResponse

func (response CreateCustomer409Response) VisitCreateCustomerResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type CreateCustomer500Response = InternalServerErrorResponse

func (response CreateCustomer500Response) VisitCreateCustomerResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetCustomerByUserIDRequestObject struct {
	UserID int64 `json:"userID"`
}

type GetCustomerByUserIDResponseObject interface {
	VisitGetCustomerByUserIDResponse(w http.ResponseWriter) error
}

type GetCustomerByUserID200JSONResponse CustomerByUserID

func (response GetCustomerByUserID200JSONResponse) VisitGetCustomerByUserIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCustomerByUserID400Response = BadRequestResponse

func (response GetCustomerByUserID400Response) VisitGetCustomerByUserIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetCustomerByUserID401Response = UnauthorizedResponse

func (response GetCustomerByUserID401Response) VisitGetCustomerByUserIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetCustomerByUserID404Response = NotFoundResponse

func (response GetCustomerByUserID404Response) VisitGetCustomerByUserIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetCustomerByUserID500Response = InternalServerErrorResponse

func (response GetCustomerByUserID500Response) VisitGetCustomerByUserIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteCreditCardRequestObject struct {
}

type DeleteCreditCardResponseObject interface {
	VisitDeleteCreditCardResponse(w http.ResponseWriter) error
}

type DeleteCreditCard204Response struct {
}

func (response DeleteCreditCard204Response) VisitDeleteCreditCardResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCreditCard400Response = BadRequestResponse

func (response DeleteCreditCard400Response) VisitDeleteCreditCardResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteCreditCard401Response = UnauthorizedResponse

func (response DeleteCreditCard401Response) VisitDeleteCreditCardResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteCreditCard404Response = NotFoundResponse

func (response DeleteCreditCard404Response) VisitDeleteCreditCardResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteCreditCard500Response = InternalServerErrorResponse

func (response DeleteCreditCard500Response) VisitDeleteCreditCardResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetCreditCardsRequestObject struct {
}

type GetCreditCardsResponseObject interface {
	VisitGetCreditCardsResponse(w http.ResponseWriter) error
}

type GetCreditCards200JSONResponse GetCreditCards

func (response GetCreditCards200JSONResponse) VisitGetCreditCardsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCreditCards400Response = BadRequestResponse

func (response GetCreditCards400Response) VisitGetCreditCardsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetCreditCards401Response = UnauthorizedResponse

func (response GetCreditCards401Response) VisitGetCreditCardsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetCreditCards500Response = InternalServerErrorResponse

func (response GetCreditCards500Response) VisitGetCreditCardsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateCreditCardRequestObject struct {
	Body *CreateCreditCardJSONRequestBody
}

type CreateCreditCardResponseObject interface {
	VisitCreateCreditCardResponse(w http.ResponseWriter) error
}

type CreateCreditCard204Response struct {
}

func (response CreateCreditCard204Response) VisitCreateCreditCardResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateCreditCard400Response = BadRequestResponse

func (response CreateCreditCard400Response) VisitCreateCreditCardResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateCreditCard401Response = UnauthorizedResponse

func (response CreateCreditCard401Response) VisitCreateCreditCardResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateCreditCard500Response = InternalServerErrorResponse

func (response CreateCreditCard500Response) VisitCreateCreditCardResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateChargeRequestObject struct {
	Body *CreateChargeJSONRequestBody
}

type CreateChargeResponseObject interface {
	VisitCreateChargeResponse(w http.ResponseWriter) error
}

type CreateCharge204Response struct {
}

func (response CreateCharge204Response) VisitCreateChargeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateCharge400Response = BadRequestResponse

func (response CreateCharge400Response) VisitCreateChargeResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateCharge401Response = UnauthorizedResponse

func (response CreateCharge401Response) VisitCreateChargeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateCharge500Response = InternalServerErrorResponse

func (response CreateCharge500Response) VisitCreateChargeResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetChargeHistoriesRequestObject struct {
	Params GetChargeHistoriesParams
}

type GetChargeHistoriesResponseObject interface {
	VisitGetChargeHistoriesResponse(w http.ResponseWriter) error
}

type GetChargeHistories200JSONResponse ChargeHistories

func (response GetChargeHistories200JSONResponse) VisitGetChargeHistoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChargeHistories400Response = BadRequestResponse

func (response GetChargeHistories400Response) VisitGetChargeHistoriesResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetChargeHistories401Response = UnauthorizedResponse

func (response GetChargeHistories401Response) VisitGetChargeHistoriesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetChargeHistories500Response = InternalServerErrorResponse

func (response GetChargeHistories500Response) VisitGetChargeHistoriesResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateReservationRequestObject struct {
	Body *CreateReservationJSONRequestBody
}

type CreateReservationResponseObject interface {
	VisitCreateReservationResponse(w http.ResponseWriter) error
}

type CreateReservation201JSONResponse ReservationResponse

func (response CreateReservation201JSONResponse) VisitCreateReservationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateReservation400Response = BadRequestResponse

func (response CreateReservation400Response) VisitCreateReservationResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateReservation401Response = UnauthorizedResponse

func (response CreateReservation401Response) VisitCreateReservationResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateReservation500Response = InternalServerErrorResponse

func (response CreateReservation500Response) VisitCreateReservationResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetProductsRequestObject struct {
	Params GetProductsParams
}

type GetProductsResponseObject interface {
	VisitGetProductsResponse(w http.ResponseWriter) error
}

type GetProducts200JSONResponse Products

func (response GetProducts200JSONResponse) VisitGetProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProductByIDRequestObject struct {
	ProductID int64 `json:"productID"`
}

type GetProductByIDResponseObject interface {
	VisitGetProductByIDResponse(w http.ResponseWriter) error
}

type GetProductByID200JSONResponse ProductByID

func (response GetProductByID200JSONResponse) VisitGetProductByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProductByID400Response = BadRequestResponse

func (response GetProductByID400Response) VisitGetProductByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetProductByID401Response = UnauthorizedResponse

func (response GetProductByID401Response) VisitGetProductByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetProductByID404Response = NotFoundResponse

func (response GetProductByID404Response) VisitGetProductByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetProductByID500Response = InternalServerErrorResponse

func (response GetProductByID500Response) VisitGetProductByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetProductCommentsRequestObject struct {
	ProductID uint64 `json:"productID"`
	Params    GetProductCommentsParams
}

type GetProductCommentsResponseObject interface {
	VisitGetProductCommentsResponse(w http.ResponseWriter) error
}

type GetProductComments200JSONResponse Comments

func (response GetProductComments200JSONResponse) VisitGetProductCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProductCommentRequestObject struct {
	ProductID uint64 `json:"productID"`
	Body      *CreateProductCommentJSONRequestBody
}

type CreateProductCommentResponseObject interface {
	VisitCreateProductCommentResponse(w http.ResponseWriter) error
}

type CreateProductComment201JSONResponse CreateProductCommentResponse

func (response CreateProductComment201JSONResponse) VisitCreateProductCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateProductComment400Response = BadRequestResponse

func (response CreateProductComment400Response) VisitCreateProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateProductComment401Response = UnauthorizedResponse

func (response CreateProductComment401Response) VisitCreateProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateProductComment403Response = ForbiddenResponse

func (response CreateProductComment403Response) VisitCreateProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateProductComment404Response = NotFoundResponse

func (response CreateProductComment404Response) VisitCreateProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CreateProductComment409Response = AlreadyExistsResponse

func (response CreateProductComment409Response) VisitCreateProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type CreateProductComment500Response = InternalServerErrorResponse

func (response CreateProductComment500Response) VisitCreateProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetProductCommentByIDRequestObject struct {
	ProductID uint64 `json:"productID"`
	CommentID uint64 `json:"commentID"`
}

type GetProductCommentByIDResponseObject interface {
	VisitGetProductCommentByIDResponse(w http.ResponseWriter) error
}

type GetProductCommentByID200JSONResponse CommentByID

func (response GetProductCommentByID200JSONResponse) VisitGetProductCommentByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProductCommentByID400Response = BadRequestResponse

func (response GetProductCommentByID400Response) VisitGetProductCommentByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetProductCommentByID401Response = UnauthorizedResponse

func (response GetProductCommentByID401Response) VisitGetProductCommentByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetProductCommentByID404Response = NotFoundResponse

func (response GetProductCommentByID404Response) VisitGetProductCommentByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetProductCommentByID500Response = InternalServerErrorResponse

func (response GetProductCommentByID500Response) VisitGetProductCommentByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteLikeProductCommentRequestObject struct {
	ProductID uint64 `json:"productID"`
	CommentID uint64 `json:"commentID"`
}

type DeleteLikeProductCommentResponseObject interface {
	VisitDeleteLikeProductCommentResponse(w http.ResponseWriter) error
}

type DeleteLikeProductComment204Response struct {
}

func (response DeleteLikeProductComment204Response) VisitDeleteLikeProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteLikeProductComment400Response = BadRequestResponse

func (response DeleteLikeProductComment400Response) VisitDeleteLikeProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteLikeProductComment401Response = UnauthorizedResponse

func (response DeleteLikeProductComment401Response) VisitDeleteLikeProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteLikeProductComment404Response = NotFoundResponse

func (response DeleteLikeProductComment404Response) VisitDeleteLikeProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteLikeProductComment500Response = InternalServerErrorResponse

func (response DeleteLikeProductComment500Response) VisitDeleteLikeProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateLikeProductCommentRequestObject struct {
	ProductID uint64 `json:"productID"`
	CommentID uint64 `json:"commentID"`
}

type CreateLikeProductCommentResponseObject interface {
	VisitCreateLikeProductCommentResponse(w http.ResponseWriter) error
}

type CreateLikeProductComment204Response struct {
}

func (response CreateLikeProductComment204Response) VisitCreateLikeProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateLikeProductComment400Response = BadRequestResponse

func (response CreateLikeProductComment400Response) VisitCreateLikeProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateLikeProductComment401Response = UnauthorizedResponse

func (response CreateLikeProductComment401Response) VisitCreateLikeProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateLikeProductComment404Response = NotFoundResponse

func (response CreateLikeProductComment404Response) VisitCreateLikeProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CreateLikeProductComment500Response = InternalServerErrorResponse

func (response CreateLikeProductComment500Response) VisitCreateLikeProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteProductMyCommentRequestObject struct {
	ProductID uint64 `json:"productID"`
	CommentID uint64 `json:"commentID"`
}

type DeleteProductMyCommentResponseObject interface {
	VisitDeleteProductMyCommentResponse(w http.ResponseWriter) error
}

type DeleteProductMyComment204Response struct {
}

func (response DeleteProductMyComment204Response) VisitDeleteProductMyCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteProductMyComment400Response = BadRequestResponse

func (response DeleteProductMyComment400Response) VisitDeleteProductMyCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteProductMyComment401Response = UnauthorizedResponse

func (response DeleteProductMyComment401Response) VisitDeleteProductMyCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteProductMyComment404Response = NotFoundResponse

func (response DeleteProductMyComment404Response) VisitDeleteProductMyCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteProductMyComment500Response = InternalServerErrorResponse

func (response DeleteProductMyComment500Response) VisitDeleteProductMyCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetProductMyCommentRequestObject struct {
	ProductID uint64 `json:"productID"`
	CommentID uint64 `json:"commentID"`
}

type GetProductMyCommentResponseObject interface {
	VisitGetProductMyCommentResponse(w http.ResponseWriter) error
}

type GetProductMyComment200JSONResponse GetMyCommentByIDResponse

func (response GetProductMyComment200JSONResponse) VisitGetProductMyCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProductMyComment400Response = BadRequestResponse

func (response GetProductMyComment400Response) VisitGetProductMyCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetProductMyComment401Response = UnauthorizedResponse

func (response GetProductMyComment401Response) VisitGetProductMyCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetProductMyComment404Response = NotFoundResponse

func (response GetProductMyComment404Response) VisitGetProductMyCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetProductMyComment500Response = InternalServerErrorResponse

func (response GetProductMyComment500Response) VisitGetProductMyCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type UpdateProductMyCommentRequestObject struct {
	ProductID uint64 `json:"productID"`
	CommentID uint64 `json:"commentID"`
	Body      *UpdateProductMyCommentJSONRequestBody
}

type UpdateProductMyCommentResponseObject interface {
	VisitUpdateProductMyCommentResponse(w http.ResponseWriter) error
}

type UpdateProductMyComment204Response struct {
}

func (response UpdateProductMyComment204Response) VisitUpdateProductMyCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateProductMyComment400Response = BadRequestResponse

func (response UpdateProductMyComment400Response) VisitUpdateProductMyCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdateProductMyComment401Response = UnauthorizedResponse

func (response UpdateProductMyComment401Response) VisitUpdateProductMyCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateProductMyComment404Response = NotFoundResponse

func (response UpdateProductMyComment404Response) VisitUpdateProductMyCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateProductMyComment500Response = InternalServerErrorResponse

func (response UpdateProductMyComment500Response) VisitUpdateProductMyCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateUserRequestObject struct {
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse CreateUserResponse

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser400Response = BadRequestResponse

func (response CreateUser400Response) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateUser401Response = UnauthorizedResponse

func (response CreateUser401Response) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateUser409Response = AlreadyExistsResponse

func (response CreateUser409Response) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type CreateUser500Response = InternalServerErrorResponse

func (response CreateUser500Response) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetMeRequestObject struct {
}

type GetMeResponseObject interface {
	VisitGetMeResponse(w http.ResponseWriter) error
}

type GetMe200JSONResponse Me

func (response GetMe200JSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMe401Response = UnauthorizedResponse

func (response GetMe401Response) VisitGetMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetMe404Response = NotFoundResponse

func (response GetMe404Response) VisitGetMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetMe500Response = InternalServerErrorResponse

func (response GetMe500Response) VisitGetMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateProfileRequestObject struct {
	Body *CreateProfileJSONRequestBody
}

type CreateProfileResponseObject interface {
	VisitCreateProfileResponse(w http.ResponseWriter) error
}

type CreateProfile201JSONResponse Profile

func (response CreateProfile201JSONResponse) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateProfile400Response = BadRequestResponse

func (response CreateProfile400Response) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateProfile401Response = UnauthorizedResponse

func (response CreateProfile401Response) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateProfile403Response = ForbiddenResponse

func (response CreateProfile403Response) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateProfile409Response = AlreadyExistsResponse

func (response CreateProfile409Response) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type CreateProfile500Response = InternalServerErrorResponse

func (response CreateProfile500Response) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetProfileMeRequestObject struct {
}

type GetProfileMeResponseObject interface {
	VisitGetProfileMeResponse(w http.ResponseWriter) error
}

type GetProfileMe200JSONResponse Profile

func (response GetProfileMe200JSONResponse) VisitGetProfileMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProfileMe401Response = UnauthorizedResponse

func (response GetProfileMe401Response) VisitGetProfileMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetProfileMe404Response = NotFoundResponse

func (response GetProfileMe404Response) VisitGetProfileMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetProfileMe500Response = InternalServerErrorResponse

func (response GetProfileMe500Response) VisitGetProfileMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// ヘルスチェックAPI
	// (GET /healthcheck)
	Healthcheck(ctx *gin.Context, request HealthcheckRequestObject) (HealthcheckResponseObject, error)
	// 不適切なコメントの一覧取得API
	// (GET /v1/admin/products/comments/violations)
	GetProductCommentViolations(ctx *gin.Context, request GetProductCommentViolationsRequestObject) (GetProductCommentViolationsResponseObject, error)
	// 不適切なコメントの削除API
	// (DELETE /v1/admin/products/comments/violations/{commentID})
	DeleteProductCommentViolationByID(ctx *gin.Context, request DeleteProductCommentViolationByIDRequestObject) (DeleteProductCommentViolationByIDResponseObject, error)
	// 外部決済向けサービスのアカウント削除API
	// (DELETE /v1/payment/customers)
	DeleteCustomer(ctx *gin.Context, request DeleteCustomerRequestObject) (DeleteCustomerResponseObject, error)
	// 外部決済向けサービスのアカウント登録API
	// (POST /v1/payment/customers)
	CreateCustomer(ctx *gin.Context, request CreateCustomerRequestObject) (CreateCustomerResponseObject, error)
	// 外部決済向けサービスのアカウント取得API
	// (GET /v1/payment/customers/{userID})
	GetCustomerByUserID(ctx *gin.Context, request GetCustomerByUserIDRequestObject) (GetCustomerByUserIDResponseObject, error)
	// 登録済みクレジットカードの削除API
	// (DELETE /v1/payments/cards)
	DeleteCreditCard(ctx *gin.Context, request DeleteCreditCardRequestObject) (DeleteCreditCardResponseObject, error)
	// 登録済みクレジットカードの一覧取得API
	// (GET /v1/payments/cards)
	GetCreditCards(ctx *gin.Context, request GetCreditCardsRequestObject) (GetCreditCardsResponseObject, error)
	// クレジットカードの新規登録API
	// (POST /v1/payments/cards)
	CreateCreditCard(ctx *gin.Context, request CreateCreditCardRequestObject) (CreateCreditCardResponseObject, error)
	// 商品の購入API
	// (POST /v1/payments/charges)
	CreateCharge(ctx *gin.Context, request CreateChargeRequestObject) (CreateChargeResponseObject, error)
	// 購入履歴の一覧取得API
	// (GET /v1/payments/charges/histories)
	GetChargeHistories(ctx *gin.Context, request GetChargeHistoriesRequestObject) (GetChargeHistoriesResponseObject, error)
	// 商品の予約API
	// (POST /v1/payments/reservations)
	CreateReservation(ctx *gin.Context, request CreateReservationRequestObject) (CreateReservationResponseObject, error)
	// 商品の一覧情報取得API
	// (GET /v1/products)
	GetProducts(ctx *gin.Context, request GetProductsRequestObject) (GetProductsResponseObject, error)
	// 商品の詳細情報取得API
	// (GET /v1/products/{productID})
	GetProductByID(ctx *gin.Context, request GetProductByIDRequestObject) (GetProductByIDResponseObject, error)
	// 商品に対してのコメント一覧取得API
	// (GET /v1/products/{productID}/comments)
	GetProductComments(ctx *gin.Context, request GetProductCommentsRequestObject) (GetProductCommentsResponseObject, error)
	// 商品に対してのコメント投稿API
	// (POST /v1/products/{productID}/comments)
	CreateProductComment(ctx *gin.Context, request CreateProductCommentRequestObject) (CreateProductCommentResponseObject, error)
	// 商品に対しての詳細なコメント取得API
	// (GET /v1/products/{productID}/comments/{commentID})
	GetProductCommentByID(ctx *gin.Context, request GetProductCommentByIDRequestObject) (GetProductCommentByIDResponseObject, error)
	// コメントに対しての「いいね」を取り消すAPI
	// (DELETE /v1/products/{productID}/comments/{commentID}/like)
	DeleteLikeProductComment(ctx *gin.Context, request DeleteLikeProductCommentRequestObject) (DeleteLikeProductCommentResponseObject, error)
	// コメントに対しての「いいね」API
	// (POST /v1/products/{productID}/comments/{commentID}/like)
	CreateLikeProductComment(ctx *gin.Context, request CreateLikeProductCommentRequestObject) (CreateLikeProductCommentResponseObject, error)
	// 自身のコメント削除API
	// (DELETE /v1/products/{productID}/users/comments/{commentID})
	DeleteProductMyComment(ctx *gin.Context, request DeleteProductMyCommentRequestObject) (DeleteProductMyCommentResponseObject, error)
	// 自身のコメント取得API
	// (GET /v1/products/{productID}/users/comments/{commentID})
	GetProductMyComment(ctx *gin.Context, request GetProductMyCommentRequestObject) (GetProductMyCommentResponseObject, error)
	// 自身のコメント更新API
	// (PUT /v1/products/{productID}/users/comments/{commentID})
	UpdateProductMyComment(ctx *gin.Context, request UpdateProductMyCommentRequestObject) (UpdateProductMyCommentResponseObject, error)
	// ユーザの新規登録API
	// (POST /v1/users)
	CreateUser(ctx *gin.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// 自身のユーザ情報取得API
	// (GET /v1/users/me)
	GetMe(ctx *gin.Context, request GetMeRequestObject) (GetMeResponseObject, error)
	// プロフィール情報の新規登録API
	// (POST /v1/users/profiles)
	CreateProfile(ctx *gin.Context, request CreateProfileRequestObject) (CreateProfileResponseObject, error)
	// 自身のプロフィール情報取得API
	// (GET /v1/users/profiles/me)
	GetProfileMe(ctx *gin.Context, request GetProfileMeRequestObject) (GetProfileMeResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Healthcheck operation middleware
func (sh *strictHandler) Healthcheck(ctx *gin.Context) {
	var request HealthcheckRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Healthcheck(ctx, request.(HealthcheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Healthcheck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HealthcheckResponseObject); ok {
		if err := validResponse.VisitHealthcheckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProductCommentViolations operation middleware
func (sh *strictHandler) GetProductCommentViolations(ctx *gin.Context, params GetProductCommentViolationsParams) {
	var request GetProductCommentViolationsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProductCommentViolations(ctx, request.(GetProductCommentViolationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProductCommentViolations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProductCommentViolationsResponseObject); ok {
		if err := validResponse.VisitGetProductCommentViolationsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProductCommentViolationByID operation middleware
func (sh *strictHandler) DeleteProductCommentViolationByID(ctx *gin.Context, commentID uint64) {
	var request DeleteProductCommentViolationByIDRequestObject

	request.CommentID = commentID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProductCommentViolationByID(ctx, request.(DeleteProductCommentViolationByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProductCommentViolationByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteProductCommentViolationByIDResponseObject); ok {
		if err := validResponse.VisitDeleteProductCommentViolationByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCustomer operation middleware
func (sh *strictHandler) DeleteCustomer(ctx *gin.Context) {
	var request DeleteCustomerRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCustomer(ctx, request.(DeleteCustomerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCustomer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCustomerResponseObject); ok {
		if err := validResponse.VisitDeleteCustomerResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCustomer operation middleware
func (sh *strictHandler) CreateCustomer(ctx *gin.Context) {
	var request CreateCustomerRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCustomer(ctx, request.(CreateCustomerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCustomer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateCustomerResponseObject); ok {
		if err := validResponse.VisitCreateCustomerResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCustomerByUserID operation middleware
func (sh *strictHandler) GetCustomerByUserID(ctx *gin.Context, userID int64) {
	var request GetCustomerByUserIDRequestObject

	request.UserID = userID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCustomerByUserID(ctx, request.(GetCustomerByUserIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCustomerByUserID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCustomerByUserIDResponseObject); ok {
		if err := validResponse.VisitGetCustomerByUserIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCreditCard operation middleware
func (sh *strictHandler) DeleteCreditCard(ctx *gin.Context) {
	var request DeleteCreditCardRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCreditCard(ctx, request.(DeleteCreditCardRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCreditCard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCreditCardResponseObject); ok {
		if err := validResponse.VisitDeleteCreditCardResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCreditCards operation middleware
func (sh *strictHandler) GetCreditCards(ctx *gin.Context) {
	var request GetCreditCardsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCreditCards(ctx, request.(GetCreditCardsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCreditCards")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCreditCardsResponseObject); ok {
		if err := validResponse.VisitGetCreditCardsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCreditCard operation middleware
func (sh *strictHandler) CreateCreditCard(ctx *gin.Context) {
	var request CreateCreditCardRequestObject

	var body CreateCreditCardJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCreditCard(ctx, request.(CreateCreditCardRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCreditCard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateCreditCardResponseObject); ok {
		if err := validResponse.VisitCreateCreditCardResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCharge operation middleware
func (sh *strictHandler) CreateCharge(ctx *gin.Context) {
	var request CreateChargeRequestObject

	var body CreateChargeJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCharge(ctx, request.(CreateChargeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCharge")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateChargeResponseObject); ok {
		if err := validResponse.VisitCreateChargeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChargeHistories operation middleware
func (sh *strictHandler) GetChargeHistories(ctx *gin.Context, params GetChargeHistoriesParams) {
	var request GetChargeHistoriesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChargeHistories(ctx, request.(GetChargeHistoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChargeHistories")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChargeHistoriesResponseObject); ok {
		if err := validResponse.VisitGetChargeHistoriesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateReservation operation middleware
func (sh *strictHandler) CreateReservation(ctx *gin.Context) {
	var request CreateReservationRequestObject

	var body CreateReservationJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateReservation(ctx, request.(CreateReservationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateReservation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateReservationResponseObject); ok {
		if err := validResponse.VisitCreateReservationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProducts operation middleware
func (sh *strictHandler) GetProducts(ctx *gin.Context, params GetProductsParams) {
	var request GetProductsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProducts(ctx, request.(GetProductsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProducts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProductsResponseObject); ok {
		if err := validResponse.VisitGetProductsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProductByID operation middleware
func (sh *strictHandler) GetProductByID(ctx *gin.Context, productID int64) {
	var request GetProductByIDRequestObject

	request.ProductID = productID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProductByID(ctx, request.(GetProductByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProductByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProductByIDResponseObject); ok {
		if err := validResponse.VisitGetProductByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProductComments operation middleware
func (sh *strictHandler) GetProductComments(ctx *gin.Context, productID uint64, params GetProductCommentsParams) {
	var request GetProductCommentsRequestObject

	request.ProductID = productID
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProductComments(ctx, request.(GetProductCommentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProductComments")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProductCommentsResponseObject); ok {
		if err := validResponse.VisitGetProductCommentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProductComment operation middleware
func (sh *strictHandler) CreateProductComment(ctx *gin.Context, productID uint64) {
	var request CreateProductCommentRequestObject

	request.ProductID = productID

	var body CreateProductCommentJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProductComment(ctx, request.(CreateProductCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProductComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateProductCommentResponseObject); ok {
		if err := validResponse.VisitCreateProductCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProductCommentByID operation middleware
func (sh *strictHandler) GetProductCommentByID(ctx *gin.Context, productID uint64, commentID uint64) {
	var request GetProductCommentByIDRequestObject

	request.ProductID = productID
	request.CommentID = commentID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProductCommentByID(ctx, request.(GetProductCommentByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProductCommentByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProductCommentByIDResponseObject); ok {
		if err := validResponse.VisitGetProductCommentByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteLikeProductComment operation middleware
func (sh *strictHandler) DeleteLikeProductComment(ctx *gin.Context, productID uint64, commentID uint64) {
	var request DeleteLikeProductCommentRequestObject

	request.ProductID = productID
	request.CommentID = commentID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLikeProductComment(ctx, request.(DeleteLikeProductCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLikeProductComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteLikeProductCommentResponseObject); ok {
		if err := validResponse.VisitDeleteLikeProductCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateLikeProductComment operation middleware
func (sh *strictHandler) CreateLikeProductComment(ctx *gin.Context, productID uint64, commentID uint64) {
	var request CreateLikeProductCommentRequestObject

	request.ProductID = productID
	request.CommentID = commentID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateLikeProductComment(ctx, request.(CreateLikeProductCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateLikeProductComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateLikeProductCommentResponseObject); ok {
		if err := validResponse.VisitCreateLikeProductCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProductMyComment operation middleware
func (sh *strictHandler) DeleteProductMyComment(ctx *gin.Context, productID uint64, commentID uint64) {
	var request DeleteProductMyCommentRequestObject

	request.ProductID = productID
	request.CommentID = commentID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProductMyComment(ctx, request.(DeleteProductMyCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProductMyComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteProductMyCommentResponseObject); ok {
		if err := validResponse.VisitDeleteProductMyCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProductMyComment operation middleware
func (sh *strictHandler) GetProductMyComment(ctx *gin.Context, productID uint64, commentID uint64) {
	var request GetProductMyCommentRequestObject

	request.ProductID = productID
	request.CommentID = commentID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProductMyComment(ctx, request.(GetProductMyCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProductMyComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProductMyCommentResponseObject); ok {
		if err := validResponse.VisitGetProductMyCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProductMyComment operation middleware
func (sh *strictHandler) UpdateProductMyComment(ctx *gin.Context, productID uint64, commentID uint64) {
	var request UpdateProductMyCommentRequestObject

	request.ProductID = productID
	request.CommentID = commentID

	var body UpdateProductMyCommentJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProductMyComment(ctx, request.(UpdateProductMyCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProductMyComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateProductMyCommentResponseObject); ok {
		if err := validResponse.VisitUpdateProductMyCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx *gin.Context) {
	var request CreateUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMe operation middleware
func (sh *strictHandler) GetMe(ctx *gin.Context) {
	var request GetMeRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMe(ctx, request.(GetMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMeResponseObject); ok {
		if err := validResponse.VisitGetMeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProfile operation middleware
func (sh *strictHandler) CreateProfile(ctx *gin.Context) {
	var request CreateProfileRequestObject

	var body CreateProfileJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProfile(ctx, request.(CreateProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateProfileResponseObject); ok {
		if err := validResponse.VisitCreateProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProfileMe operation middleware
func (sh *strictHandler) GetProfileMe(ctx *gin.Context) {
	var request GetProfileMeRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProfileMe(ctx, request.(GetProfileMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProfileMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProfileMeResponseObject); ok {
		if err := validResponse.VisitGetProfileMeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
